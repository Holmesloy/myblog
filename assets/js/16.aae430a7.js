(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{488:function(t,s,a){t.exports=a.p+"assets/img/get.0cb2309b.png"},534:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"ajax"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ajax"}},[t._v("#")]),t._v(" Ajax")]),t._v(" "),n("p",[t._v("Asynchronous JavaScript and XML，是一种可以实现不重新加载而获取数据并更新部分页面的技术，用于快速开发网页，核心在于XMLHttpRequest对象，数据不一定是XML数据。")]),t._v(" "),n("h3",{attrs:{id:"xmlhttprequest"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest"}},[t._v("#")]),t._v(" XMLHttpRequest")]),t._v(" "),n("p",[t._v("要在浏览器中创建一个XHR对象，只需要使用XMLHttpRequest构造函数：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xhr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),n("p",[n("strong",[t._v("open()方法")]),n("br"),t._v('\n接收3个参数：发送的请求类型（"get", "post"等）、请求的URL和是否表示异步发送的布尔值。')]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true异步，false同步  ")]),t._v("\nxhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"example.php"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),n("p",[t._v("这行代码表示一个针对example.php的异步请求，注意open()方法不发送实际请求，只是启动一个请求。"),n("br"),t._v(" "),n("strong",[t._v("send()方法")]),n("br"),t._v("\n使用open()方法启动请求后，要想发送请求，则调用send()方法，接收一个参数，即为要发送的数据，如果不需要发送数据，则必须传入null。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"example.php"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nxhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),n("p",[t._v("发送请求到服务器后，服务器返回的数据会自动填充XHR对象的属性，相关属性如下：")]),t._v(" "),n("ul",[n("li",[t._v("responseText：返回的数据文本")]),t._v(" "),n("li",[t._v("responseXML：如果响应的内容类型为xml，则属性包含相应XML DOM文档")]),t._v(" "),n("li",[t._v("status：响应的HTTP状态")]),t._v(" "),n("li",[t._v("statusText：HTTP状态的说明")])]),t._v(" "),n("p",[t._v("通常，开发中会根据响应的HTTP状态进行下一步操作。"),n("br"),t._v(" "),n("strong",[t._v("readyState属性")]),n("br"),t._v("\n我们一般使用异步请求，因此需要根据XHR的readyState属性得到请求/响应过程中所处的阶段，再进行相应处理。")]),t._v(" "),n("ul",[n("li",[t._v("0：未初始化，未调用open()方法")]),t._v(" "),n("li",[t._v("1：启动，已经调用open()，未调用send()")]),t._v(" "),n("li",[t._v("2：发送，已调用send()，未收到响应")]),t._v(" "),n("li",[t._v("3：接收，已接收到部分响应数据")]),t._v(" "),n("li",[t._v("4：完成，已接收到全部响应数据")])]),t._v(" "),n("p",[t._v("readyState每次值变化时，会触发一次"),n("strong",[t._v("readystatechange")]),t._v("事件，一般我们判断值为4时结合readystatechange事件进行相应回调处理。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xhr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nxhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onreadystatechange")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的函数是异步执行的  ")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readystatechange "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseText"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nxhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/api"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nxhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),n("h3",{attrs:{id:"http头部信息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http头部信息"}},[t._v("#")]),t._v(" HTTP头部信息")]),t._v(" "),n("p",[t._v("每个HTTP请求和响应都会带有相应的头部信息。默认情况下，发送XHR请求的同时，还会发送下列头部信息。")]),t._v(" "),n("ul",[n("li",[t._v("Accept：浏览器能够处理的内容类型")]),t._v(" "),n("li",[t._v("Accept-Charset：浏览器能够处理的字符集")]),t._v(" "),n("li",[t._v("Accept-Encoding：浏览器能够处理的压缩编码")]),t._v(" "),n("li",[t._v("Accept-Language：浏览器当前语言")]),t._v(" "),n("li",[t._v("Connection：浏览器与服务器之间的连接类型")]),t._v(" "),n("li",[t._v("Cookie：当前页面设置的任何Cookie")]),t._v(" "),n("li",[t._v("Host：发出请求的页面所在的域")]),t._v(" "),n("li",[t._v("Referer：发出请求的页面的URI")]),t._v(" "),n("li",[t._v("User-Agent：浏览器的用户代理字符串"),n("br"),t._v("\n使用XHR的**setRequestHeader()**方法可以设置自定义的请求头部信息，接收两个参数：头部字段和对应的值。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"example.php"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nxhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRequestHeader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyHeader"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyValue"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nxhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),n("p",[t._v("注意，必须在open()方法之后send()方法之前设置。"),n("br"),t._v("\n使用XHR的**getResponseHeader()"),n("strong",[t._v("方法传入头部字段名称可以获取对应的字段值，使用")]),t._v("getAllResponseHeader()**方法获取所有头部信息，以一个长字符串的形式。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myHead "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getResponseHeader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyHeader"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" allHeaders "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAllResponseHeader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),n("h3",{attrs:{id:"get和post"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get和post"}},[t._v("#")]),t._v(" GET和POST")]),t._v(" "),n("ul",[n("li",[t._v("get一般用于查询操作，post一般用于用户提交操作")]),t._v(" "),n("li",[t._v("get参数拼接在url后，post参数放在请求体内（数据体积可更大)")]),t._v(" "),n("li",[t._v("post易于防止CSRF攻击（因为比较难跨域）")])]),t._v(" "),n("p",[t._v("GET常用于向服务器查询某些信息，而且可以使用缓存。"),n("br"),t._v("\nPOST常用于向服务器发送要被保存的数据，不可缓存。"),n("br"),t._v("\nGET的参数应该放在url中，POST方法参数应该放在body中"),n("br"),t._v(" "),n("strong",[t._v("GET方法参数写法是固定的吗？")]),n("br"),t._v("\n约定中，参数写在 ? 后面，用 & 分割。"),n("br"),t._v("\n而解析报文的过程是通过获取TCP数据，用正则等从数据中获取Header和Body，因此可以自定义写法，如："),n("br"),t._v("\nhttp://www.example.com/user/name/chengqm/age/22"),n("br"),t._v(" "),n("strong",[t._v("POST方法比GET方法安全？")]),n("br"),t._v("\n这样说的主要原因是GET方法的参数是放在url中的，可以直接看到，而POST的参数是放在body中的。实际上，HTTP都是明文传输的，因此都是不安全的，只要使用抓包工具就能获取数据报文。"),n("br"),t._v("\n想要安全传输，就需要加密，即使用HTTPS。"),n("br"),t._v(" "),n("strong",[t._v("GET方法的长度限制？")]),n("br"),t._v("\nGET和POST都是HTTP协议方法，而HTTP协议中并没有规定url的长度和body的长度，而GET方法参数放在url中，url的长度是被浏览器限制的，为了性能和安全，浏览器不允许太长的url。"),n("br"),t._v(" "),n("strong",[t._v("POST方法产生两个TCP数据包？")]),n("br"),t._v("\nHTTP协议中没有明确说明POST会产生两个TCP数据包，在Chrome中测试发现header和body也没有分开进行发送。因此，header和body分开发送是部分浏览器或框架的请求方法，不是post的必然行为。"),n("br"),t._v(" "),n("strong",[t._v("出自W3C的标准答案")]),n("br"),t._v(" "),n("img",{attrs:{src:a(488),alt:""}})]),t._v(" "),n("h3",{attrs:{id:"formdata"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#formdata"}},[t._v("#")]),t._v(" FormData")]),t._v(" "),n("p",[t._v("FormData对象用来帮助表单进行序列化以及创建与表单格式相同的数据。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FormData")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \ndata"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"z"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),n("p",[t._v("append()方法接收两个参数：key和value，分别对应表单字段的名字和值。"),n("br"),t._v("\n创建FormData实例后，可以将它传给send()方法，不必明确地在XHR对象上设置请求头部。XHR可以识别FormData类型，并配置适当的头部信息。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"example.php"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" form "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"form1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nxhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FormData")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("form"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 传入实例  ")]),t._v("\n")])])]),n("h2",{attrs:{id:"fetch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fetch"}},[t._v("#")]),t._v(" fetch()")]),t._v(" "),n("p",[t._v("fetch()是对XMLHttpRequest进行封装的一个新的API，它返回一个Promise，同时加入了.then()操作。"),n("br"),t._v("\n注意点:")]),t._v(" "),n("ul",[n("li",[t._v("fetch()返回的Promise只有resolve，除非网络故障才会返回reject")]),t._v(" "),n("li",[t._v("fetch()不会从服务端发送或接收任何cookies（可自己设置credential属性）")])]),t._v(" "),n("h2",{attrs:{id:"axios"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#axios"}},[t._v("#")]),t._v(" axios")]),t._v(" "),n("p",[t._v("同样是对XMLHttpRequest的封装，功能强大")]),t._v(" "),n("h2",{attrs:{id:"跨域源资源共享（cors）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#跨域源资源共享（cors）"}},[t._v("#")]),t._v(" 跨域源资源共享（CORS）")]),t._v(" "),n("p",[t._v("同源：协议、域名、端口号均相同。"),n("br"),t._v("\n默认情况下，使用XHR实现的Ajax只能访问同一域中的资源，预防某些恶意行为。"),n("br"),t._v("\n跨域源资源共享（Cross-Origin Resource Sharing）定义了在访问跨域资源时，浏览器与服务器之间沟通的方式。"),n("br"),t._v("\nCORS基本思想：使用自定义的HTTP头部，让浏览器和服务器之间进行沟通，从而决定响应能否成功。"),n("br"),t._v(" "),n("strong",[t._v("简答版-服务器设置http header")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 第二个参数填写允许跨域的域名，不建议写"*"  ')]),t._v("\nresponse"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Access-Control-Allow-Origin"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://api.com"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \nresponse"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Access-Control-Allow-Headers"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myHeader"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \nresponse"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Access-Control-Allow-Methods"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PUT,POST,GET,DELETE,OPTIONS"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接收跨域的cookie  ")]),t._v("\nresponse"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v('"'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n\n")])])]),n("p",[t._v("然后客户端直接使用相应方法请求相应域")]),t._v(" "),n("h3",{attrs:{id:"预检请求（preflighted-requests）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#预检请求（preflighted-requests）"}},[t._v("#")]),t._v(" 预检请求（Preflighted Requests）")]),t._v(" "),n("p",[t._v("在发送请求之前（GET或POST请求之外），浏览器先使用"),n("strong",[t._v("OPTIONS")]),t._v("方法发起一个预检请求，获取到服务器允许请求的信息后，才发起实际的HTTP请求。预检请求返回的信息中，服务器也可以通知客户端是否要携带身份凭证（包括Cookies和HTTP相关认证数据）。"),n("br"),t._v("\n预检请求发送的头部如下：")]),t._v(" "),n("ul",[n("li",[t._v("Origin：与简单的请求相同。")]),t._v(" "),n("li",[t._v("Access-Control-Request-Method：请求使用的方法。")]),t._v(" "),n("li",[t._v("Access-Control-Request-Headers：（可选）自定义头部信息，多个头部以逗号分隔。")])]),t._v(" "),n("p",[t._v("发送这个请求后，服务器可以决定是否允许这种类型的请求，然后响应下列头部信息：")]),t._v(" "),n("ul",[n("li",[t._v("Access-Control-Allow-Origin：与简单的请求相同。")]),t._v(" "),n("li",[t._v("Access-Control-Allow-Methods：允许的方法，多个以逗号分隔")]),t._v(" "),n("li",[t._v("Access-Control-Allow-Headers：允许的头部，多个以逗号分隔")]),t._v(" "),n("li",[t._v("Access-Control-Max-Age：该预检请求缓存的时间（秒）"),n("br"),t._v("\n例如：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Access-Control-Allow-Origin：http://www.myWebsite.com  \nAccess-Control-Allow-Methods：GET, POST  \nAccess-Control-Allow-Headers：NCZ  \nAccess-Control-Max-Age：1728000  \n")])])]),n("p",[n("strong",[t._v("带凭据的请求")]),n("br"),t._v("\n默认情况下，跨域请求不提供凭据（cookie、HTTP认证以及客户端SSL证明等）。服务器通过"),n("strong",[t._v("widthCredentials")]),t._v("属性设置为true，可以指定某个请求应该发送凭据，服务器响应头部设置如下：")]),t._v(" "),n("ul",[n("li",[t._v("Access-Control-Allow-Credenttials: true")])]),t._v(" "),n("p",[t._v("如果客户端发送了带凭据的请求，但是服务器无此头部，则响应失败。（responseText为空字符串，status为0，然后调用onerror()事件处理程序）")]),t._v(" "),n("h2",{attrs:{id:"其他跨域技术"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他跨域技术"}},[t._v("#")]),t._v(" 其他跨域技术")]),t._v(" "),n("h3",{attrs:{id:"图像ping"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#图像ping"}},[t._v("#")]),t._v(" 图像Ping")]),t._v(" "),n("p",[t._v("一个网页可以从任意网页中加载图像，这是在线广告跟踪浏览量的主要方式。因此，使用"),n("code",[t._v("<img>")]),t._v("标签或者动态创建图像可以实现跨域通信。"),n("br"),t._v("\n通过图像Ping，浏览器得不到任何具体的数据，但通过侦听load和error事件，可以知道响应是什么时候完成的。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" img "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Image")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nimg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onload "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" img"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onerror")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Done!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \nimg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.baidu.com"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),n("p",[t._v("图像Ping常用来跟踪用户点击页面或者动态广告曝光次数。缺点是只能发送GET请求，然后无法访问服务器的响应文本。")]),t._v(" "),n("h3",{attrs:{id:"jsonp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[t._v("#")]),t._v(" JSONP")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("<script>")]),t._v("可绕过跨域限制")]),t._v(" "),n("li",[t._v("服务器可以任意动态拼接数据返回")]),t._v(" "),n("li",[t._v("所以，"),n("code",[t._v("<script>")]),t._v("就可以获得跨域的数据，只要服务器正确设置了数据")])]),t._v(" "),n("p",[t._v("JSON with padding（填充式JSON或参数式JSON），由两部分构成：回调函数和数据。回调函数是响应到来时的处理函数，而数据就是响应得到的JSON数据，传入回调函数中处理。"),n("br"),t._v("\nJSON通过动态"),n("code",[t._v("<script>")]),t._v("元素实现，使用时将其src属性指定一个跨域的URL，其不受限制从其他域来加载资源。"),n("br"),t._v("\n加载图片、css、CDN和js中使用的"),n("code",[t._v("<img/>")]),t._v("，"),n("code",[t._v("<link>")]),t._v("，"),n("code",[t._v("<script>")]),t._v("不受同源策略影响。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理函数  ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleResponse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("response")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// response即为响应数据  ")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I am response data:"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" response"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" script "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"script"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nscript"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://..."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置src  ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入到某处  ")]),t._v("\ndocument"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),n("p",[t._v("优点：简单易用且能直接访问响应文本。"),n("br"),t._v("\n缺点：从其他域中加载代码执行，若响应中夹杂恶意代码，则安全性得不到保证。另外，无法确定其请求是否失败，通常采用超时的办法进行检测是否接收到数据。")]),t._v(" "),n("h2",{attrs:{id:"comet（服务器推送技术）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#comet（服务器推送技术）"}},[t._v("#")]),t._v(" Comet（服务器推送技术）")]),t._v(" "),n("p",[t._v("Comet是一种服务器向页面推送数据的技术，能让信息近乎实时地被推送到页面上，适合处理体育比赛分数和股票报价。")]),t._v(" "),n("h3",{attrs:{id:"长轮询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#长轮询"}},[t._v("#")]),t._v(" 长轮询")]),t._v(" "),n("p",[t._v("页面发起一个到服务器的请求，然后服务器一直保持连接打开，知道有数据可发送。（短轮询是定期发送请求）"),n("br"),t._v("\n发送完数据之后，浏览器关闭连接，然后再发起一个新的请求。"),n("br"),t._v("\n短轮询是服务器立即发送响应，无论数据是否有效，而长轮询是等待发送响应。使用XHR对象和setTimeout()即可实现。")]),t._v(" "),n("h3",{attrs:{id:"http流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http流"}},[t._v("#")]),t._v(" HTTP流")]),t._v(" "),n("p",[t._v("页面的整个生命周期内只使用一个HTTP连接，服务器保持连接打开，周期性向浏览器发送数据。"),n("br"),t._v("\n所有服务器端语言都支持打印到输出缓存然后刷新（输出缓存内容一次性发送到客户端）的功能，以此实现HTTP流。"),n("br"),t._v("\n通过侦听"),n("strong",[t._v("readystatechange")]),t._v("事件及检测"),n("strong",[t._v("readyState")]),t._v("值是否为3，即可利用XHR对象实现HTTP流。因为浏览器从服务器接收到数据，"),n("strong",[t._v("readyState")]),t._v("会周期性地变为3，然后"),n("strong",[t._v("responeseText")]),t._v("保存接收到的数据。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要连接的url，接收数据时的处理函数与连接断开的处理函数  ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("streamClient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" progress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" finished")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xhr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n        received "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onreadystatechange")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readyState "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只获得最新数据并调整计数器  ")]),t._v("\n            result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseText"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("received"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n            received "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用progress函数  ")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("progress")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readyState "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("finished")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseText"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" xhr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n")])])]),n("h3",{attrs:{id:"web-sockets"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#web-sockets"}},[t._v("#")]),t._v(" Web Sockets")]),t._v(" "),n("p",[t._v("在一个单独、持久的连接上提供全双工、双向通信。"),n("br"),t._v("\n(1) Web Socket API"),n("br"),t._v("\n创建一个Web Socket（传入要连接的url）"),n("br"),t._v(" "),n("code",[t._v('var socket = new WebSocket("ws://www.example.com/server.php");')]),n("br"),t._v("\n注意，WebSocket构造函数需传入绝对URL，且支持跨域。"),n("br"),t._v("\nWebSocket的readyState状态属性：")]),t._v(" "),n("ul",[n("li",[t._v("WebSocket.OPENING(0)：正在建立连接")]),t._v(" "),n("li",[t._v("WebSocket.OPENING(1)：已经建立连接")]),t._v(" "),n("li",[t._v("WebSocket.CLOSING(2)：正在关闭连接")]),t._v(" "),n("li",[t._v("WebSocket.CLOSING(3)：已经关闭连接")])]),t._v(" "),n("p",[t._v("关闭连接：socket.close();"),n("br"),t._v("\n(2) 发送和接收数据")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" socket "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebSocket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ws://www.example.com/server.php"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nsocket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),n("p",[t._v("Web Sockets只能发送纯文本数据，对于复杂的数据结构，发送之前必须进行序列化。"),n("br"),t._v("\n当服务器向客户端发来消息时，WebSocket对象会触发message事件，把返回的数据保存在event.data属性中。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onmessage "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("funciton")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理数据  ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n")])])]),n("p",[t._v("(3) 其他事件")]),t._v(" "),n("ul",[n("li",[t._v("open：成功连接时触发")]),t._v(" "),n("li",[t._v("error：发生错误时触发，连接不能持续")]),t._v(" "),n("li",[t._v("close：连接关闭时触发")])]),t._v(" "),n("h2",{attrs:{id:"axios-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#axios-2"}},[t._v("#")]),t._v(" axios")]),t._v(" "),n("ul",[n("li",[t._v("基于Promise实现对原生XHR的封装")]),t._v(" "),n("li",[t._v("从node.js创建http请求")]),t._v(" "),n("li",[t._v("客户端支持防止CSRF（每个请求都携带一个cookie中的key，根据同源策略，假冒网站拿不到cookie，因此后台可以识别用户是否在假冒网站上，然后进行处理）")]),t._v(" "),n("li",[t._v("提供并发请求的接口")])])])}),[],!1,null,null,null);s.default=e.exports}}]);