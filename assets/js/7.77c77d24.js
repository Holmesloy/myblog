(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{500:function(t,v,_){t.exports=_.p+"assets/img/http.338c7a6d.png"},501:function(t,v,_){t.exports=_.p+"assets/img/http1.cb886fbf.png"},502:function(t,v,_){t.exports=_.p+"assets/img/huancun.8656435f.png"},503:function(t,v,_){t.exports=_.p+"assets/img/huancun1.ab9592a9.png"},504:function(t,v,_){t.exports=_.p+"assets/img/huancun2.457143ff.png"},505:function(t,v,_){t.exports=_.p+"assets/img/huancun3.102f1de9.png"},506:function(t,v,_){t.exports=_.p+"assets/img/huancun4.d8c4ec00.png"},507:function(t,v,_){t.exports=_.p+"assets/img/https.1dbd29b8.png"},508:function(t,v,_){t.exports=_.p+"assets/img/netmodel.ee3010e0.png"},566:function(t,v,_){"use strict";_.r(v);var a=_(4),e=Object(a.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"http"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),a("p",[a("img",{attrs:{src:_(500),alt:"http"}})]),t._v(" "),a("h2",{attrs:{id:"http基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http基本概念"}},[t._v("#")]),t._v(" HTTP基本概念")]),t._v(" "),a("p",[t._v("HTTP（HyperText Transfer Protocal），超文本传输协议。用于浏览器与服务器之间的数据传输。")]),t._v(" "),a("h3",{attrs:{id:"http状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http状态码"}},[t._v("#")]),t._v(" HTTP状态码")]),t._v(" "),a("p",[a("img",{attrs:{src:_(501),alt:"state"}}),a("br"),t._v("\n常用状态码：")]),t._v(" "),a("ul",[a("li",[t._v("200 OK：响应成功，数据正确返回")]),t._v(" "),a("li",[t._v("204 No Content：响应成功，但是响应头没有body数据")]),t._v(" "),a("li",[t._v("206 Partial Content：HTTP分块下载，响应返回的body数据并不是全部")])]),t._v(" "),a("hr"),t._v(" "),a("ul",[a("li",[t._v("301 Move Permanently：永久重定向，说明请求资源不存在了，需要使用新的URL访问，配合location，浏览器自动跳转")]),t._v(" "),a("li",[t._v("302 Moved Temporaryly：临时重定向，说明请求的资源还在，但是暂时需要另一个URL来访问，配合location，浏览器自动跳转")]),t._v(" "),a("li",[t._v("304 Not Modified：资源未修改，重定向已存在的缓存文件")])]),t._v(" "),a("hr"),t._v(" "),a("ul",[a("li",[t._v("400 Bad Request：表示客户端请求的报文有错误，笼统的错误码")]),t._v(" "),a("li",[t._v("401 Unauthorized：未授权，表示请求未携带需要的认证信息")]),t._v(" "),a("li",[t._v("403 Forbidden：表示请求携带了认证信息，但是服务器认为该信息用户无访问权限，禁止访问")]),t._v(" "),a("li",[t._v("404 Not Found：请求的资源不存在或者未找到")])]),t._v(" "),a("hr"),t._v(" "),a("ul",[a("li",[t._v("500 Internal Server Error：服务器错误，也是笼统的错误码")]),t._v(" "),a("li",[t._v("501 Not Implemented：表示客户端请求的功能还不支持")]),t._v(" "),a("li",[t._v("502 Bad Gateway：服务器作为网关或代理时返回的错误码，表示服务器工作正常，而后端服务器发生了错误")]),t._v(" "),a("li",[t._v("503 Service Unavailable：服务器繁忙，无法响应")]),t._v(" "),a("li",[t._v("504 Gateway timeout：网关超时")])]),t._v(" "),a("p",[a("strong",[t._v("常见Request Headers（客户端发送）")])]),t._v(" "),a("ul",[a("li",[t._v("Accept：浏览器可接收的数据格式")]),t._v(" "),a("li",[t._v("Accept-Encoding：浏览器可接收的压缩算法，如gzip（减小资源体积）")]),t._v(" "),a("li",[t._v("Accept-Languange：浏览器可接收的语言，如zh-CN")]),t._v(" "),a("li",[t._v("Connection：keep-alive —— 一次TCP连接重复使用，持久连接")]),t._v(" "),a("li",[t._v("cookie")]),t._v(" "),a("li",[t._v("Host：发送请求时的域名")]),t._v(" "),a("li",[t._v("User-Agent（UA）：浏览器信息")]),t._v(" "),a("li",[t._v("Content-Type：发送数据的格式，如application/json")]),t._v(" "),a("li",[t._v("If-Modified-Since：本地浏览器存储的文件修改时间")]),t._v(" "),a("li",[t._v("If-None-Match：本地浏览器存储的资源标识")])]),t._v(" "),a("p",[a("strong",[t._v("常见Response Headers（服务器返回）")])]),t._v(" "),a("ul",[a("li",[t._v("Content-Type：返回的数据格式，如text/html")]),t._v(" "),a("li",[t._v("Content-Length：返回数据的大小（字节）")]),t._v(" "),a("li",[t._v("Content-Encoding：返回数据的压缩算法，如gzip")]),t._v(" "),a("li",[t._v("Set-Cookie：服务器改变的cookie")]),t._v(" "),a("li",[t._v("Cache-Control：缓存有效时间设置")]),t._v(" "),a("li",[t._v("Last-Modified：服务器存储的资源的最后修改时间（秒级）")]),t._v(" "),a("li",[t._v("Etag：服务器端资源的唯一标识（一个字符串）")])]),t._v(" "),a("h2",{attrs:{id:"现今的http方法（约定的规范）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#现今的http方法（约定的规范）"}},[t._v("#")]),t._v(" 现今的HTTP方法（约定的规范）")]),t._v(" "),a("ul",[a("li",[t._v("get：获取数据")]),t._v(" "),a("li",[t._v("post：新建数据")]),t._v(" "),a("li",[t._v("patch/put：更新数据")]),t._v(" "),a("li",[t._v("delete：删除数据")])]),t._v(" "),a("h3",{attrs:{id:"restful-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restful-api"}},[t._v("#")]),t._v(" Restful API")]),t._v(" "),a("ul",[a("li",[t._v("一种API设计方法")]),t._v(" "),a("li",[t._v("传统API设计：把每个url当作一个功能")]),t._v(" "),a("li",[t._v("Restful API设计：把每个url当作一个唯一的资源")])]),t._v(" "),a("p",[a("strong",[t._v("设计成资源的方法")])]),t._v(" "),a("ol",[a("li",[t._v("尽量不用url参数\n"),a("ul",[a("li",[t._v("传统API设计：/api/list?pageIndex=2")]),t._v(" "),a("li",[t._v("Restful API设计：/api/list/2")])])]),t._v(" "),a("li",[t._v("用method表示操作类型\n"),a("ul",[a("li",[t._v("传统API设计：post请求 —— /api/create-blog")]),t._v(" "),a("li",[t._v("Restful API设计：post请求 —— /api/blog")]),t._v(" "),a("li",[t._v("patch请求 —— /api/blog/100（只有看到方法才知道api功能）")])])])]),t._v(" "),a("h3",{attrs:{id:"get-和-post"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post"}},[t._v("#")]),t._v(" Get 和 Post")]),t._v(" "),a("p",[t._v("HTTP协议中，"),a("br"),t._v("\n「安全」表示请求方法不会「破坏」服务器上的资源，"),a("br"),t._v("\n「幂等」表示多次执行相同的操作，结果都是「相同」的。"),a("br"),t._v("\n因此，GET方法就是安全且幂等的，POST方法是不安全且不幂等的。")]),t._v(" "),a("h2",{attrs:{id:"http缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http缓存"}},[t._v("#")]),t._v(" HTTP缓存")]),t._v(" "),a("ul",[a("li",[t._v("需要重复获取的资源进行缓存，下次访问的时候就不需要重新请求")]),t._v(" "),a("li",[t._v("由于网络请求速度较慢，所以需要尽量减少网络请求，提高页面加载速度")]),t._v(" "),a("li",[t._v("通常可以缓存的资源是一些静态资源，如js、css、img")])]),t._v(" "),a("p",[a("img",{attrs:{src:_(502),alt:"HTTP缓存"}})]),t._v(" "),a("h3",{attrs:{id:"强制缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存"}},[t._v("#")]),t._v(" 强制缓存")]),t._v(" "),a("p",[a("strong",[t._v("Cache-Control")]),a("br"),t._v("\n当服务器响应请求时，如果服务器觉得资源可以被缓存，就返回Cache-Control字段")]),t._v(" "),a("ul",[a("li",[t._v("Response Headers中")]),t._v(" "),a("li",[t._v("控制强制缓存的逻辑")]),t._v(" "),a("li",[t._v("例如Cache-Control：max-age=31536（单位是s）")]),t._v(" "),a("li",[t._v("再次请求时若强制缓存可用，则不使用网络请求")]),t._v(" "),a("li",[t._v("若强制缓存不可用，则再次发送请求访问服务器获取数据")]),t._v(" "),a("li",[t._v("注：服务器资源改变")])]),t._v(" "),a("p",[a("strong",[t._v("Expires")])]),t._v(" "),a("ul",[a("li",[t._v("http1.0中字段，优先级弱于Cache-Control")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{alt:"强制缓存",src:_(503)}}),t._v(" "),a("p",[a("strong",[t._v("Cache-Control的值")])]),t._v(" "),a("ul",[a("li",[t._v("max-age：最长缓存有效时间，如max-age=3600")]),t._v(" "),a("li",[t._v("组合属性：public-客户端和代理服务器都可以缓存；private-只有浏览器缓存")]),t._v(" "),a("li",[t._v("no-cache：不使用强制缓存")]),t._v(" "),a("li",[t._v("no-store：不使用任何缓存")])]),t._v(" "),a("h3",{attrs:{id:"协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),a("ul",[a("li",[t._v("服务端缓存策略")]),t._v(" "),a("li",[t._v("服务端判断客户端资源，是否与服务端一样")]),t._v(" "),a("li",[t._v("一致则返回304，使用缓存，否则返回200和最新的资源")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{alt:"协商缓存",src:_(504)}}),t._v(" "),a("p",[a("strong",[t._v("资源标识")])]),t._v(" "),a("ul",[a("li",[t._v("在Response Headers中，有以下两种：")]),t._v(" "),a("li",[t._v("Last-Modified：资源的最后修改时间（精确到秒级）")]),t._v(" "),a("li",[t._v("Etag：资源的唯一标识（一个唯一字符串，优先使用）")]),t._v(" "),a("li",[t._v("如果资源被重复生成，而内容不变，则适合使用Etag")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{alt:"Last-Modified",src:_(505)}}),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{alt:"Etag",src:_(506)}}),t._v(" "),a("h3",{attrs:{id:"最佳实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践"}},[t._v("#")]),t._v(" 最佳实践")]),t._v(" "),a("p",[t._v("当使用vue-cli打包后会生成一个html，以及一堆css、img资源等，其中")]),t._v(" "),a("ul",[a("li",[t._v("index.html采用协商缓存，保证资源更新后可以及时访问")]),t._v(" "),a("li",[t._v("其他资源采用强缓存+协商缓存")])]),t._v(" "),a("h3",{attrs:{id:"刷新操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#刷新操作"}},[t._v("#")]),t._v(" 刷新操作")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("类别")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("操作")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("对缓存的影响")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("正常刷新")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("地址栏输入url，跳转链接，前进后退等")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("强制缓存和协商缓存均有效")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("手动刷新")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("F5，点击刷新按钮，右击菜单刷新")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("强制缓存失效，协商缓存有效")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("强制刷新")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("ctrl + F5")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("强制缓存和协商缓存都失效")])])])]),t._v(" "),a("h2",{attrs:{id:"http特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http特性"}},[t._v("#")]),t._v(" HTTP特性")]),t._v(" "),a("h3",{attrs:{id:"优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),a("ol",[a("li",[t._v("简单"),a("br"),t._v("\nHTTP基本报文格式就是"),a("code",[t._v("header + body")]),t._v("，头部信息也是"),a("code",[t._v("key-value")]),t._v("形式，易于理解和使用")]),t._v(" "),a("li",[t._v("灵活和易于扩展"),a("br"),t._v("\nHTTP协议中的各类请求方法、URI、状态码、头字段等每个组成都没有被固定死，允许开发人员自定义和扩充")]),t._v(" "),a("li",[t._v("应用广泛和跨平台"),a("br"),t._v("\n从电脑浏览器到手机浏览器，从电脑客户端到手机客户端都可用。")])]),t._v(" "),a("h3",{attrs:{id:"缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),a("ol",[a("li",[t._v("无状态双刃剑"),a("br"),t._v("\n好处是不需要额外资源来记录状态信息，节省CPU和内存资源。坏处是服务器没有记忆能力，那么很多操作比如购物下单等将十分麻烦！")]),t._v(" "),a("li",[t._v("明文传输")]),t._v(" "),a("li",[t._v("不安全"),a("br"),t._v("\n通信使用明文，而且不验证通信方身份，有可能访问如假的淘宝等。另外，无法证明报文的完整性，则可能被篡改，如各种垃圾广告。")])]),t._v(" "),a("h2",{attrs:{id:"http的性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http的性能"}},[t._v("#")]),t._v(" HTTP的性能")]),t._v(" "),a("p",[t._v("HTTP协议基于TCP/IP，使用了"),a("strong",[t._v("请求-应答")]),t._v("的通信模式，这是性能的关键点。"),a("br"),t._v(" "),a("strong",[t._v("1. 长连接")]),a("br"),t._v("\nHTTP/1.1提出长连接的通信方式，即持久连接，只要任意一端没有明确提出断开连接，则保持TCP连接状态。"),a("br"),t._v("\n这种方式减少了连接的重复建立和断开的额外开销，减轻了服务器端的负载。"),a("br"),t._v(" "),a("strong",[t._v("2. 管道网络运输")]),a("br"),t._v("\n基于HTTP/1.1的长连接，可用使用管道运输。"),a("br"),t._v("\n在同一个TCP连接里面，客户端可以发起多个请求，即不用等待响应，即可继续发送下一个请求，减少整体的响应时间。"),a("br"),t._v("\n服务器的响应还是按照顺序来的，一个一个回应。如果前面的回应等待时间过长，后面很多在排队，则造成队头阻塞。")]),t._v(" "),a("h2",{attrs:{id:"http与https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http与https"}},[t._v("#")]),t._v(" HTTP与HTTPS")]),t._v(" "),a("p",[a("strong",[t._v("区别")])]),t._v(" "),a("ul",[a("li",[t._v("HTTPS在TCP和网络层之间加入了SSL/TLS安全协议，进行加密传输。")]),t._v(" "),a("li",[t._v("HTTPS在TCP进行三次握手之后，还需要加入SSL/TLS的握手过程，进入加密报文传输。")]),t._v(" "),a("li",[t._v("HTTP的端口号是80，HTTPS的端口号是443。")]),t._v(" "),a("li",[t._v("HTTPS需要向CA（证书权威机构）申请数字证书，保证服务器的身份可信")])]),t._v(" "),a("p",[a("strong",[t._v("解决方案")])]),t._v(" "),a("ul",[a("li",[t._v("信息加密：交互信息无法被窃取")]),t._v(" "),a("li",[t._v("校验机制：无法篡改通信内容")]),t._v(" "),a("li",[t._v("身份证书：证明网站的真实性")])]),t._v(" "),a("p",[a("strong",[t._v("实现方式")])]),t._v(" "),a("ol",[a("li",[t._v("混合加密"),a("br"),t._v("\n对称加密 + 非对称加密：在通信建立前采用非对称加密交换会话密钥，后续通信过程全部使用对称加密传输数据。"),a("br"),t._v("\n对称加密使用一个密钥，运算速度快，但是必须保密，无法做到安全的密钥交换。非对称加密使用公钥和私钥，公钥公开，私钥保密，解决了密钥交换问题但速度较慢。")]),t._v(" "),a("li",[t._v("摘要算法"),a("br"),t._v("\n摘要算法用来实现完整性，为数据生成独一无二的"),a("strong",[t._v("指纹")]),t._v("，用于校验数据的完整性，解决了篡改的风险。")])]),t._v(" "),a("h3",{attrs:{id:"https过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https过程"}},[t._v("#")]),t._v(" HTTPS过程")]),t._v(" "),a("p",[a("img",{attrs:{src:_(507),alt:"HTTPS"}})]),t._v(" "),a("ol",[a("li",[a("p",[t._v("客户端向服务器发起HTTPS的请求，连接到服务器的443端口；")])]),t._v(" "),a("li",[a("p",[t._v("服务器将非对称加密的公钥传递给客户端，以证书的形式回传到客户端")])]),t._v(" "),a("li",[a("p",[t._v("客户端接受到该公钥进行验证，就是验证2中证书，如果没有问题，则上述公钥是合格的。（第一次HTTP请求）客户端这个时候随机生成一个密钥（用作对称加密），称为client key。然后使用前面服务器的公钥对client key进行非对称加密，客户端的密钥就变成密文了；")])]),t._v(" "),a("li",[a("p",[t._v("客户端发起HTTPS中第二次HTTP请求，将加密之后的client key传递给服务器；")])]),t._v(" "),a("li",[a("p",[t._v("服务器使用私钥进行解密，得到client key,使用client key对数据进行对称加密")])]),t._v(" "),a("li",[a("p",[t._v("将对称加密的数据传递给客户端，客户端使用客户端密钥解密，得到服务器发送的数据，完成第二次HTTP请求。")])])]),t._v(" "),a("h2",{attrs:{id:"http-1-0、http-1-1、http-2-0、http-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0、http-1-1、http-2-0、http-3"}},[t._v("#")]),t._v(" HTTP/1.0、HTTP/1.1、HTTP/2.0、HTTP/3")]),t._v(" "),a("h3",{attrs:{id:"http-1-1相对http1-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1相对http1-0"}},[t._v("#")]),t._v(" HTTP/1.1相对HTTP1.0")]),t._v(" "),a("ul",[a("li",[t._v("使用TCP长连接方式改善性能")]),t._v(" "),a("li",[t._v("支持管道网络传输，只要请求发出去不必等待响应就可发送第二个请求")])]),t._v(" "),a("p",[a("strong",[t._v("HTTP1.1瓶颈")])]),t._v(" "),a("ul",[a("li",[t._v("头部（Header）未经压缩就发送，首部信息越多延迟越大，且浪费资源")]),t._v(" "),a("li",[t._v("服务器按照请求顺序响应，若服务器响应慢，客户端则get不到数据，造成队头阻塞")]),t._v(" "),a("li",[t._v("没有请求优先级控制")]),t._v(" "),a("li",[t._v("请求只能从客户端开始，服务器被动响应")])]),t._v(" "),a("h3",{attrs:{id:"http2-0改进"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2-0改进"}},[t._v("#")]),t._v(" HTTP2.0改进")]),t._v(" "),a("p",[t._v("HTTP2.0基于HTTPS，因此安全性有保障")]),t._v(" "),a("ul",[a("li",[t._v("首部压缩：若同时发出多个请求，如果头部一样或相似，则HTTP2会消除重复的部分。（HPACK算法：客户端和服务器同时维护一张头部信息表，字段存入这个表，生成一个索引号，以后直接发送索引号）。")]),t._v(" "),a("li",[t._v("二进制格式：之前报文都是纯文本形式，2.0全部采用二进制格式，被称为帧，提高了数据传输的效率。")]),t._v(" "),a("li",[t._v("数据流：数据包不再按顺序发送，每个请求或回应对应的所有数据包，称为一个数据流，数据流有编号，客户端还可以指定数据流的优先级。")]),t._v(" "),a("li",[t._v("多路复用：在一个连接中并发多个请求或回应，不用按照顺序一一对应，降低延迟，提高连接利用率")]),t._v(" "),a("li",[t._v("服务器推送：服务器可以主动向客户端推送数据")])]),t._v(" "),a("p",[a("strong",[t._v("HTTP2.0缺陷")]),a("br"),t._v("\n多个HTTP请求复用一个TCP连接，一旦丢包，就会阻塞所有的HTTP请求")]),t._v(" "),a("h3",{attrs:{id:"http3-0改进"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http3-0改进"}},[t._v("#")]),t._v(" HTTP3.0改进")]),t._v(" "),a("p",[t._v("HTTP3.0把HTTP下层的TCP协议改成了UDP协议"),a("br"),t._v("\nUDP发生不管顺序，也不管丢包，所以不会出现队头阻塞和一个丢包全部重传。"),a("br"),t._v("\n由于UDP是不可靠传输，所以实际上使用的是基于UDP的"),a("strong",[t._v("QUIC协议")]),t._v("实现类似TCP的可靠传输。"),a("br"),t._v("\nQUIC中，若某个流发生丢包，只会阻塞这个流。建立连接时，减少了交互次数，将三次握手和TLS三次握手合并为3次交互。"),a("br"),t._v("\n总结：QUIC是一个在UDP之上的伪TCP + TLS + HTTP/2的多路复用协议。"),a("br"),t._v("\n目前HTTP3并未普及，因为很多网络设备不知道什么是QUIC，只会当作UDP，所以目前兼容性存在问题。")]),t._v(" "),a("h2",{attrs:{id:"计算机网络知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络知识"}},[t._v("#")]),t._v(" 计算机网络知识")]),t._v(" "),a("h3",{attrs:{id:"五层网络模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五层网络模型"}},[t._v("#")]),t._v(" 五层网络模型")]),t._v(" "),a("p",[a("img",{attrs:{src:_(508),alt:"net"}})]),t._v(" "),a("ul",[a("li",[t._v("物理层：物理设备")]),t._v(" "),a("li",[t._v("数据链路层：建立数据链路连接，传输基础数据流")]),t._v(" "),a("li",[t._v("网络层：数据在节点间创建逻辑链路，网络寻址")]),t._v(" "),a("li",[t._v("传输层：提供可靠的端到端服务")]),t._v(" "),a("li",[t._v("应用层：应用软件服务，如HTTP协议")])]),t._v(" "),a("h3",{attrs:{id:"tcp和udp的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp和udp的区别"}},[t._v("#")]),t._v(" TCP和UDP的区别")]),t._v(" "),a("ul",[a("li",[t._v("TCP面向连接，发送数据前要先建立连接。UDP无连接")]),t._v(" "),a("li",[t._v("TCP提供可靠服务，无差错、不丢失。UDP不保证可靠传输")]),t._v(" "),a("li",[t._v("TCP面向字节流，数据为一连串字节流。UDP是面向报文的")]),t._v(" "),a("li",[t._v("TCP首部开销20字节，UDP首部开销8字节，UDP更加简单高效")]),t._v(" "),a("li",[t._v("TCP点对点，UDP可以多对多")])]),t._v(" "),a("h3",{attrs:{id:"tcp协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp协议"}},[t._v("#")]),t._v(" TCP协议")]),t._v(" "),a("p",[a("strong",[t._v("ARQ协议")]),t._v("\n超时重传协议，过确认和超时机制保证了数据的正确送达，ARQ 协议包含停止等待 ARQ 和连续 ARQ。")]),t._v(" "),a("p",[a("strong",[t._v("滑动窗口")]),t._v("\n在 TCP 中，两端都维护着窗口：分别为发送端窗口和接收端窗口\n发送端窗口是由接收窗口剩余大小决定的。接收方会把当前接收窗口的剩余大小写入应答报文，发送端收到应答后根据该值和当前网络拥塞情况设置发送窗口的大小，所以发送窗口的大小是不断变化的。\n滑动窗口实现了流量控制。接收方通过报文告知发送方还可以发送多少数据，从而保证接收方能够来得及接收数据。")]),t._v(" "),a("p",[a("strong",[t._v("拥塞处理")])]),t._v(" "),a("ol",[a("li",[t._v("慢开始：传输开始时将发送窗口慢慢指数级扩大，从而避免一开始就传输大量数据导致网络拥塞。")]),t._v(" "),a("li",[t._v("拥塞避免：每过一个 RTT 窗口大小只加一，这样能够避免指数级增长导致网络拥塞，慢慢将大小调整到最佳值。")]),t._v(" "),a("li",[t._v("快启动：一旦接收端收到的报文出现失序的情况，接收端只会回复最后一个顺序正确的报文序号。")])]),t._v(" "),a("h3",{attrs:{id:"应用层协议，使用tcp还是udp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用层协议，使用tcp还是udp"}},[t._v("#")]),t._v(" 应用层协议，使用TCP还是UDP")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("应用层协议")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("传输层协议")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HTTP协议")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("TCP")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("FTP文件传输协议")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("TCP")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("SMTP邮件发送协议")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("TCP")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("POP3邮件接收协议")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("TCP")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("DNS域名系统")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("UDP")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("DHCP协议，动态获取IP地址")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("UDP")])])])]),t._v(" "),a("h3",{attrs:{id:"cdn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cdn"}},[t._v("#")]),t._v(" CDN")]),t._v(" "),a("ul",[a("li",[t._v("Content Delivery NetWork，内容分发网络")]),t._v(" "),a("li",[t._v("简单理解：将资源分配到各个地区中，根据用户IP地址去访问最近资源，加快访问速度")]),t._v(" "),a("li",[t._v("本质是将媒体资源内容缓存到距离最近的IDC，从而让用户共享资源，缩短站点间响应时间")]),t._v(" "),a("li",[t._v("由边缘结点和中心结点组成")]),t._v(" "),a("li",[t._v("相关技术：内容发布、内容存储、内容路由、内容管理")])])])}),[],!1,null,null,null);v.default=e.exports}}]);