(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{530:function(t,e,a){"use strict";a.r(e);var r=a(4),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"leetcode题解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#leetcode题解"}},[t._v("#")]),t._v(" Leetcode题解")]),t._v(" "),a("h2",{attrs:{id:"递归"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[t._v("#")]),t._v(" 递归")]),t._v(" "),a("p",[a("strong",[t._v("递归三步法：")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("明确递归函数的功能，不去想递归过程")])]),t._v(" "),a("li",[a("p",[t._v("找出递归终止条件")])]),t._v(" "),a("li",[a("p",[t._v("找出函数的等价关系式，即f(n)和f(n-1)之间的关系")])])]),t._v(" "),a("h2",{attrs:{id:"动态规划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[t._v("#")]),t._v(" 动态规划")]),t._v(" "),a("p",[t._v("使用一维或者二维数组，保存之前计算得到的结果，避免进行重复计算，找出本地结果和之前结果之间的关系。"),a("br"),t._v(" "),a("strong",[t._v("三步法：")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("定义数组元素的含义，明确dp[i]表示的意思")])]),t._v(" "),a("li",[a("p",[t._v("找出数组元素之间的关系式，根据之前的结果推出dp[n]")])]),t._v(" "),a("li",[a("p",[t._v("找出初始值")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);