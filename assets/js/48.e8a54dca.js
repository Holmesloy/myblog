(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{558:function(t,s,a){"use strict";a.r(s);var n=a(4),v=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),a("p",[t._v("学习正则表达式的最快方法就是使用它，首先来看一个例子："),a("br"),t._v("\n// i表示忽略大小写，g表示全局匹配"),a("br"),t._v(" "),a("code",[t._v("const reg = /^[a-zA-Z]\\w{5,29}$/ig")]),a("br"),t._v("\nor"),a("br"),t._v(" "),a("code",[t._v("const reg = new RegExp(/^[a-zA-Z]\\w{5,29}$/, ig)")]),a("br"),t._v(" "),a("strong",[t._v("解释：")])]),t._v(" "),a("ul",[a("li",[t._v("^  ： 开头")]),t._v(" "),a("li",[t._v("[] ： 选择，多选一")]),t._v(" "),a("li",[t._v("a-z ： a到z")]),t._v(" "),a("li",[t._v("a-zA-Z ： 拼接在一起表示范围为a-z和A-Z")]),t._v(" "),a("li",[t._v("\\w ： 命中字母、数字或下划线（注意：\\w本身就表示一个字符，后面{}表示有多少个这种字符）")]),t._v(" "),a("li",[t._v("{ } ： 长度范围集合，闭区间，{5,29}：大于等于5个，小于等于29个")]),t._v(" "),a("li",[t._v("$ ： 结尾")])]),t._v(" "),a("p",[t._v("综上表示：以字母开头，后面为字母数字或下划线，整体长度6-30")]),t._v(" "),a("p",[a("strong",[t._v("作用方向")])]),t._v(" "),a("ul",[a("li",[t._v("*  ： 前面，0个或多个")]),t._v(" "),a("li",[t._v("+  ： 前面，1个或多个")]),t._v(" "),a("li",[t._v("?  ：   前面，0个或一个")]),t._v(" "),a("li",[t._v("{n, }  ： 前面，最少n个")]),t._v(" "),a("li",[t._v("\\ ： 后面，转义字符，如"),a("code",[t._v("\\.")]),t._v("表示一个.")])]),t._v(" "),a("p",[a("strong",[t._v("特殊字符")])]),t._v(" "),a("ul",[a("li",[t._v("\\d ： 一个数字字符，等价于[0-9]")]),t._v(" "),a("li",[t._v("\\n ： 一个换行符")]),t._v(" "),a("li",[t._v("\\s ： 任何空白字符，如空格、制表符等")]),t._v(" "),a("li",[t._v("\\w ： 字母、数字、下划线，等价于[a-zA-Z0-9]")])]),t._v(" "),a("p",[a("strong",[t._v("例子")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("邮政编码"),a("br"),t._v(" "),a("code",[t._v("/\\d{6}/")]),t._v("：6位数字")])]),t._v(" "),a("li",[a("p",[t._v("小写英文字母"),a("br"),t._v(" "),a("code",[t._v("/^[a-z]+$/")]),t._v("：一个或多个小写英文字母")])]),t._v(" "),a("li",[a("p",[t._v("英文字母"),a("br"),t._v(" "),a("code",[t._v("/^[a-zA-Z]+$/")])])]),t._v(" "),a("li",[a("p",[t._v("日期格式 2020-02-02"),a("br"),t._v(" "),a("code",[t._v("/^\\d{4}-\\d{1,2}-\\d{1,2}$/")])])]),t._v(" "),a("li",[a("p",[t._v("简单的IP地址"),a("br"),t._v(" "),a("code",[t._v("/\\d+\\.\\d+\\.\\d+\\.\\d/")]),t._v("：其中.表示一个.，\\为转义字符，若不加则.表示一个任意字符")])])]),t._v(" "),a("p",[t._v("手写trim：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过原型、this、正则表达式，将开头空格和结尾空格替换为''  ")]),t._v("\nString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("protytype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("trim")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先替换开头空格再替换结尾空格")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^\\s+/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\s+$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n")])])])])}),[],!1,null,null,null);s.default=v.exports}}]);